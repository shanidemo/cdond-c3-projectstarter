version: 2.1
defaults: &defaults
  docker:
    - image: circleci/node:13.8.0

awsImage: &awsImage
  docker:
    - image: amazon/aws-cli

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl https://kvdb.io/9MTBK1NA1tTTdcgwFqkm5t/migration_<< parameters.workflow_id >>)
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
            
jobs:
  build-frontend:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          command: |
            cd backend
            npm install
            npm run test
            
  scan-frontend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    <<: *awsImage
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID} \
              --tags project=backend
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            pwd
            ls -lh .circleci/ansible
            cat .circleci/ansible/hosts
            aws ec2 describe-instances  --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=backend" --output text >> .circleci/ansible/hosts
            cat .circleci/ansible/hosts
            yum install -y tar gzip
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/hosts
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name udapeople-front-${CIRCLE_WORKFLOW_ID}\
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID} \
              --tags project=frontend
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID}
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["b5:6f:85:c4:33:03:99:c2:d0:c5:88:82:89:f9:d4:43"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible/
            ansible-playbook -i hosts configure-server.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID}
  run-migrations:
    docker:
      - image: circleci/node:14.18.1
    steps:
      - checkout
      - restore_cache:
          keys: [backend_build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            echo "npm fix ..."
            npm audit fix
            echo "npm run migration ...."
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/9MTBK1NA1tTTdcgwFqkm5t/migration_${CIRCLE_WORKFLOW_ID}  -d '1'
            fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID}
      - revert-migrations

  deploy-frontend:
    <<: *awsImage
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            cd frontend
            yum install -y curl tar gzip
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install -y nodejs
            node --version
            npm --version
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances  --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=backend" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID} --recursive
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID}   
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["b5:6f:85:c4:33:03:99:c2:d0:c5:88:82:89:f9:d4:43"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible curl rsync openssh nodejs npm
            pip install awscli
      - run:
          name: Deploy backend
          command: |
            echo "Contents  of the hosts file is -------"
            cat .circleci/ansible/hosts
            cd backend
            ls -lh
            echo "running npm i ...."
            npm i
            echo "running npm build ...."
            npm run build
            ls -lh
            du -sh *
            ls -lh dist
            cd ..
            echo "make tar from backend ...."
            tar -C backend -czf artifact.tar.gz .
            cd .circleci/ansible
            echo "running deploy backend playbook ...."
            ansible-playbook -i hosts deploy-backend.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID}
  smoke-test:
    docker:
      - image: python:3.7-alpine3.11  
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm
            pip install awscli
      - run:
          name: Get backend url
          command: |
              export BACKEND_IP=$(aws ec2 --region us-east-1 describe-instances \
                      --filters Name=instance-state-name,Values=running Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID} \
                      --query 'Reservations[*].Instances[*].PublicIpAddress' \
                      --output text)
              echo BACKEND_URL: http://${BACKEND_IP}:3030/api/status
      - run:
          name: Backend smoke test.
          command: |
              export BACKEND_IP=$(aws ec2 --region us-east-1 describe-instances \
                     --filters Name=instance-state-name,Values=running Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID} \
                     --query 'Reservations[*].Instances[*].PublicIpAddress' \
                     --output text)
              echo $BACKEND_IP
              if 
                 curl -s http://${BACKEND_IP}:3030/api/status | grep "ok"
              then
                 exit 0
              else
                 exit 1
              fi
      - run:
          name: Frontend smoke test.
          command: |
             URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website-us-east-1.amazonaws.com/#/employees"            
             echo ${URL} 
             if curl -s http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website-us-east-1.amazonaws.com/#/employees | grep "Welcome"
             then
                 return 0
             else
                 return 1
             fi
      - revert-migrations

  cloudfront-update:
    <<: *awsImage
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip curl
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install -y nodejs
      - run:
          name: find old env
          command: |
             aws cloudformation \
                	   list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                	    --no-paginate --output text >> old_id.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/old_id.txt
      - run:
          name: Update cloudfront distribution
          command: |
              aws cloudformation update-stack --use-previous-template --stack-name udapeople \
                     --parameters ParameterKey=WorkflowID,ParameterValue=${CIRCLE_WORKFLOW_ID},UsePreviousValue=false
      - revert-migrations
  cleanup:
    <<: *awsImage
    steps:
      - checkout
      - run:
          name: install deps
          command: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Remove old stacks and files
          command: |
            export OldWorkflowID=$(cat old_id.txt)
            export STACKS=("udapeople-backend-$OldWorkflowID" "udapeople-front-$OldWorkflowID")
            if [[ -z "$OldWorkflowID" ]]
            then
              echo "there isn't any old version"
            elif [[ "${CIRCLE_WORKFLOW_ID}" != "$OldWorkflowID" ]]
            then
              echo "not equal"
              for stack in ${STACKS[@]};do
                echo "deleting stack $stack"
                aws cloudformation delete-stack --stack-name $stack
              done
              aws s3 rb s3://udapeople-$OldWorkflowID
            fi
           

workflows:
  default:
    jobs:
       - test
       - build-backend
       - build-frontend
       - test-frontend:
           requires: [build-frontend]
       - test-backend:
           requires: [build-backend]
       - scan-backend:
           requires: [build-backend]
       - scan-frontend:
           requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
